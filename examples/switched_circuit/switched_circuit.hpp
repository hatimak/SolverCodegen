/**
 *
 * LBLMC Vivado HLS Simulation Engine for FPGA Designs
 *
 * Auto-generated by SimulationEngineGenerator Object
 *
 */

#ifndef switched_circuit_SIMULATIONENGINE_HPP
#define switched_circuit_SIMULATIONENGINE_HPP

template <int instance, typename real>
void switched_circuit_solver(real x_out[2], real *l_current_SW, bool sw_SW) {
  // MODEL PARAMETERS

  const static real VOLTAGE_Vs = 1.0000000000000000e+02;
  const static real RES_Vs = 1.0000000000000000e-03;
  const static real SRC_CURRENT_Vs = 1.0000000000000000e+05;

  const static real DT_SW = 4.9999999999999998e-08;
  const static real L_SW = 1.0000000000000000e-03;
  const static real R_SW = 1.0000000000000000e+01;
  const static real HOL_SW = 4.9999999999999996e-05;

  const static real DT_Cap = 4.9999999999999998e-08;
  const static real CAP_Cap = 9.9999999999999995e-07;
  const static real HOC2_Cap = 4.0000000000000000e+01;

  // COMPONENT FIELDS AND STATES

  static real current_past_SW = 0.0000000000000000e+00;
  static bool sw_past_SW = false;

  static real epos_past_Cap = 0.0000000000000000e+00;
  static real eneg_past_Cap = 0.0000000000000000e+00;
  static real delta_v_Cap = 0.0000000000000000e+00;
  static real current_Cap = 0.0000000000000000e+00;
  static real current_eq_Cap = 0.0000000000000000e+00;
  static real current_eq_past_Cap = 0.0000000000000000e+00;

  // MODEL SOLUTIONS

  static real b[2];
  static real x[3];
  real b_components[3];

  // INVERTED CONDUCTANCE MATRIX

  const static real inv_g[2][2] = {
      {1.0000000000000000e-03, 0.0000000000000000e+00},
      {0.0000000000000000e+00, 2.4937655860349125e-02}};

  // COMPONENT SOURCE CONTRIBUTION UPDATES

  b_components[0] = SRC_CURRENT_Vs;

  real current_SW;

  if (sw_past_SW) {
    current_SW = current_past_SW +
                 HOL_SW * (x[1] - R_SW * current_past_SW -
                           x[2]); // Euler Forward (explicit)
  } else {
    current_SW = 0; // force de-energizing of inductor to zero when switch open
  }

  current_past_SW = current_SW;
  sw_past_SW = sw_SW;

  b_components[1] = -current_SW;

  epos_past_Cap = x[2];
  eneg_past_Cap = x[0];
  current_eq_past_Cap = current_eq_Cap;
  delta_v_Cap = epos_past_Cap - eneg_past_Cap;
  current_Cap = HOC2_Cap * delta_v_Cap - current_eq_past_Cap;
  current_eq_Cap = current_Cap + HOC2_Cap * delta_v_Cap;
  b_components[2] = current_eq_Cap;

  // MODEL OUTPUT SIGNAL UPDATES

  *l_current_SW = current_SW;

  // AGGREGRATE COMPONENT SOURCE CONTRIBUTIONS

  b[0] = b_components[0] + b_components[1];
  b[1] = -b_components[1] + b_components[2];

  // MODEL UPDATE SOLUTIONS

  x[0] = 0.0;
  x[1] = inv_g[0][0] * b[0];
  x[2] = real(0.0) + inv_g[1][1] * b[1];

  x_out[0] = x[1];
  x_out[1] = x[2];
}

#endif